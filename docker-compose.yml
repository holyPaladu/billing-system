version: "3.8"

networks:
  app-networks:
    driver: bridge

services:
  auth-service:
    build:
      context: ./auth-service
      dockerfile: Dockerfile
    ports:
      - "8080:3000"
    environment:
      NODE_ENV: development
      DATABASE_HOST: postgres-db
      DATABASE_PORT: 5432
      DATABASE_USER: postgres
      DATABASE_PASSWORD: postgres
      DATABASE_NAME: authdb
      JWT_SECRET: authjwtsecretkey
      JWT_REFRESH_SECRET: supersecretrefreshkey
    depends_on:
      - postgres-db
      - kafka
    networks:
      - app-networks
    volumes:
      - ./auth-service:/app
      - /app/node_modules # Добавляем исключение для node_modules
    command: npm run start

  notification-service:
    build:
      context: ./notification-service
      dockerfile: Dockerfile
    ports:
      - "8081:3001"
    environment:
      NODE_ENV: development
      DATABASE_HOST: postgres-db
      DATABASE_PORT: 5432
      DATABASE_USER: postgres
      DATABASE_PASSWORD: postgres
      DATABASE_NAME: notificationdb
      EMAIL_USER: ironicpaladin2907@gmail.com
      EMAIL_PASS: hktuoyvtdfgmdvws
    depends_on:
      - postgres-db
      - kafka
    networks:
      - app-networks
    volumes:
      - ./notification-service:/app
      - /app/node_modules
    command: npm run start

  product-service:
    build:
      context: ./product-service
      dockerfile: Dockerfile
    ports:
      - "8082:3002"
    environment:
      NODE_ENV: development
      DATABASE_HOST: postgres-db
      DATABASE_PORT: 5432
      DATABASE_USER: postgres
      DATABASE_PASSWORD: postgres
      DATABASE_NAME: productdb
      JWT_SECRET: authjwtsecretkey
      JWT_REFRESH_SECRET: supersecretrefreshkey
    depends_on:
      - postgres-db
      - kafka
    networks:
      - app-networks
    volumes:
      - ./product-service:/app
      - /app/node_modules
    command: npm run start

  subscription-service:
    build:
      context: ./subscription-service
      dockerfile: Dockerfile
    ports:
      - "8083:3003"
    environment:
      NODE_ENV: development
      DATABASE_HOST: postgres-db
      DATABASE_PORT: 5432
      DATABASE_USER: postgres
      DATABASE_PASSWORD: postgres
      DATABASE_NAME: subscriptiondb
      JWT_SECRET: authjwtsecretkey
      JWT_REFRESH_SECRET: supersecretrefreshkey
    depends_on:
      - postgres-db
      - kafka
    networks:
      - app-networks
    volumes:
      - ./subscription-service:/app
      - /app/node_modules
    command: npm run start

  payment-service:
    build:
      context: ./payment-service
      dockerfile: Dockerfile
    ports:
      - "8084:3004"
    environment:
      NODE_ENV: development
      DATABASE_HOST: postgres-db
      DATABASE_PORT: 5432
      DATABASE_USER: postgres
      DATABASE_PASSWORD: postgres
      DATABASE_NAME: paymentdb
      JWT_SECRET: authjwtsecretkey
      JWT_REFRESH_SECRET: supersecretrefreshkey
    depends_on:
      - postgres-db
      - kafka
    networks:
      - app-networks
    volumes:
      - ./payment-service:/app
      - /app/node_modules
    command: npm run start

  postgres-db:
    image: postgres:15
    restart: always
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: authdb
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app-networks

  kafka:
    image: docker.io/bitnami/kafka:3.9
    container_name: kafka
    ports:
      - "9092:9092"
    volumes:
      - "kafka_data:/bitnami"
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
    networks:
      - app-networks

volumes:
  pgdata:
  kafka_data:
